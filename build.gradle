gradle.taskGraph.beforeTask {Task task -> println "excuting $task ..."}
gradle.taskGraph.afterTask {Task task, TaskState state -> if (state.failure) { println "Failure" } else { println "Done" }}

ext {
    javaVersion = '1.6'
    javaEncoding = 'UTF-8'
    springframeworkVersion = '4.0.3.RELEASE'
    springframeworkdataVersion = '1.6.0.RELEASE'
    springframeworksecurityVersion = '3.2.4.RELEASE'
    hibernateVersion = '4.3.5.Final'
    webProjects = ['applechip-api', 'applechip-web']
}

List springframeworks = [
	"org.springframework:spring-context:${springframeworkVersion}",
	"org.springframework:spring-context-support:${springframeworkVersion}",
	"org.springframework:spring-webmvc:${springframeworkVersion}",
	"org.springframework:spring-orm:${springframeworkVersion}",
	"org.springframework:spring-oxm:${springframeworkVersion}",
	"org.springframework.data:spring-data-jpa:${springframeworkdataVersion}",
	"org.springframework.security:spring-security-config:${springframeworksecurityVersion}"
]

List hibernates = [
	"org.hibernate:hibernate-entitymanager:${hibernateVersion}",
	"org.hibernate:hibernate-ehcache:${hibernateVersion}"
]

List testCommons = [
	"org.springframework:spring-test:${springframeworkVersion}",
	"junit:junit:4.11",
	"org.mockito:mockito-all:1.9.5"
]

List javaCommons = [
	"org.projectlombok:lombok:1.14.4",
	"commons-configuration:commons-configuration:1.10",
	"commons-lang:commons-lang:2.6",
	"commons-io:commons-io:2.4",
	"commons-collections:commons-collections:3.2.1",
	"commons-dbcp:commons-dbcp:1.4",
	"commons-codec:commons-codec:1.9"
]

List jdbcDrivers = [
	"mysql:mysql-connector-java:5.1.31",
	"com.microsoft.sqlserver:sqljdbc4:4.0",
	"com.github.ferstl:spring-jdbc-oracle-ojdbc:1.0.0"
]
/*
List loggers = [
        "org.slf4j:slf4j-api:${slf4jVersion}",
        "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
        "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
        "org.slf4j:jul-to-slf4j:${slf4jVersion}",
]
*/
buildscript {
    repositories {
        maven { url "http://nexus.bywook.com/content/groups/public" }
        mavenCentral()
	}
	dependencies {
	//println "$project.rootProject.projectDir/applechip-plugin/build/libs/applechip-plugin-${version}.jar"
		//classpath files("D:/dev/workspace-applechip/applechip-plugin-${version}.jar")
		//classpath("com.applechip:applechip-plugin:1.0-SNAPSHOT")
	}
}

configure(allprojects) { project ->
    ext.javaVersion = "1.7"
    ext.javaEncoding = "UTF-8"
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
	gradle.taskGraph.whenReady { taskGraph -> if (taskGraph.hasTask(':release')) { project.version = "${version}".replace("-SNAPSHOT", "") }}
}

subprojects {
    apply plugin: 'java'
    
     /*   
	compileJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:fallthrough", "-Xlint:rawtypes", "-Xlint:deprecation",
		"-Xlint:unchecked", "-Xlint:-options", "-Werror"
	]

	compileTestJava.options*.compilerArgs = [
		"-Xlint:serial", "-Xlint:varargs", "-Xlint:cast", "-Xlint:classfile",
		"-Xlint:dep-ann", "-Xlint:divzero", "-Xlint:empty", "-Xlint:finally",
		"-Xlint:overrides", "-Xlint:path", "-Xlint:processing", "-Xlint:static",
		"-Xlint:try", "-Xlint:-fallthrough", "-Xlint:-rawtypes", "-Xlint:-deprecation",
		"-Xlint:-unchecked", "-Xlint:-options"]

	compileJava {
		sourceCompatibility="$javaVersion"
		targetCompatibility="$javaVersion"
	}

	compileTestJava {
		sourceCompatibility="$javaVersion"
		targetCompatibility="$javaVersion"
		options.compilerArgs += "-parameters"
	}

	sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

	test {
		scanForTestClasses = false
	}
	*/
	
}

configure(subprojects.findAll { webProjects.contains(it.name) }) {
    apply plugin: 'war'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'
    apply from: '../gradle/version/versioning.gradle'
    webAppDirName = 'src/main/webapp'
    dependencies {
        providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
        providedCompile 'jstl:jstl:1.2'
    }
    
    dependencies() {
        compile springframeworks        
        compile jdbcDrivers
        compile hibernates
        compile javaCommons
        testCompile testCommons
        compile gradleApi()
    }
	eclipse.classpath.file {
	    beforeMerged { classpath -> 
	        classpath.entries.clear()
	    }
	    whenMerged {  cp -> 
	        cp.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder  && it.path.startsWith("src/main/") }*.output = "bin/main" 
	        cp.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder  && it.path.startsWith("src/test/") }*.output = "bin/test" 
	        cp.entries.removeAll { it.kind == "output" }
	    }
	}
    eclipse {
        wtp {
            facet {
                facet name: 'jst.web', version: '3.0'
                facet name: 'jst.java', version: '1.7'
                facet name: 'wst.jsdt.web', version: '1.0'
            }
        }
    }
    clean {
        delete project.file('/src/main/webapp/WEB-INF/classes'), project.file('/src/main/webapp/WEB-INF/lib')
    }
    war {
    	dependsOn createBuildInfoFile
    	from(buildDir) {
    		include 'build-info.properties'
    		into('WEB-INF/classes')
    	}
    }
}

configure(subprojects) { project ->
	dependencies {
		compile("org.projectlombok:lombok:1.14.4")
	}
}

project(":applechip-core") {

	configurations {
	    provided {
		    dependencies.all { dep ->
	            exclude group: "*", module: "*"
	            //configurations.default.exclude group: dep.group, module: dep.name
	        }
        }
	    compile.extendsFrom provided
	}

	dependencies {
	    //compile gradleApi()
        provided javaCommons
        testCompile testCommons
		//provided("org.springframework.security:spring-security-config:$springframeworksecurityVersion")
		provided("org.springframework.security:spring-security-core:$springframeworksecurityVersion")
		//provided("org.springframework.data:spring-data-jpa:$springframeworkdataVersion")
		provided("org.springframework:spring-orm:$springframeworkVersion")
		provided("org.springframework:spring-tx:$springframeworkVersion")
		provided("org.springframework:spring-jdbc:$springframeworkVersion")
		provided("org.springframework:spring-context-support:$springframeworkVersion")
		provided("org.springframework:spring-context:$springframeworkVersion")
		provided("org.hibernate:hibernate-entitymanager:$hibernateVersion")
		provided("net.sf.ehcache:ehcache:2.8.3")
		//provided("org.springframework:spring-webmvc:$springframeworkVersion")
		provided("org.springframework:spring-web:$springframeworkVersion")
		provided("org.springframework:spring-beans:$springframeworkVersion")
		provided("org.springframework:spring-core:$springframeworkVersion")
		provided("org.springframework:spring-aop:$springframeworkVersion")
		provided("aopalliance:aopalliance:1.0")
		/*
		 {
			exclude group: "*", module: "*"
		}
			//exclude group: "*", module: "*"
		}
		*/
	}
	sourceSets.main.resources.srcDirs += "src/main/java"
	/*
sourceSets {
    main {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
    test {
        compileClasspath += configurations.provided
        runtimeClasspath += configurations.provided
    }
}
*/
}


project(":applechip-plugin") {
	configurations {
	    provided {
		    dependencies.all { dep ->
	            configurations.default.exclude group: dep.group, module: dep.name
	        }
        }
	    compile.extendsFrom provided
	}
	dependencies {
	    compile gradleApi()
	    compile("org.hibernate:hibernate-entitymanager:4.3.5.Final")
	}
}
