gradle.taskGraph.beforeTask {Task task -> println "excuting $task ..."}
gradle.taskGraph.afterTask {Task task, TaskState state -> if (state.failure) { println "Failure" } else { println "Done" }}
ext {
    javaVersion = '1.6'
    javaEncoding = 'UTF-8'
    springframeworkVersion = '4.0.3.RELEASE'
    springframeworkdataVersion = '1.8.0.RELEASE'
    springframeworksecurityVersion = '3.2.4.RELEASE'
    hibernateVersion = '4.3.5.Final'
    slf4jVersion = '1.7.7'
    webProjects = ['applechip-api', 'applechip-web']
}

List jdbcDrivers = [
	"mysql:mysql-connector-java:5.1.31",
	"com.microsoft.sqlserver:sqljdbc4:4.0",
	"com.github.ferstl:spring-jdbc-oracle-ojdbc:1.0.0",
	"org.hsqldb:hsqldb:2.3.2",
	"com.h2database:h2:1.4.181"
]

buildscript {
    repositories {
        maven { url "http://nexus.bywook.com/content/groups/public" }
        mavenCentral()
	}
	dependencies {
	//println "$project.rootProject.projectDir/applechip-plugin/build/libs/applechip-plugin-${version}.jar"
		classpath files("D:/dev/workspace-applechip/applechip-plugin-${version}.jar")
		//classpath("com.applechip:applechip-plugin:1.0-SNAPSHOT")
	}
}

configure(allprojects) { project ->
    ext.javaVersion = "1.7"
    ext.javaEncoding = "UTF-8"
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
	gradle.taskGraph.whenReady { taskGraph -> if (taskGraph.hasTask('build')) { version = "${version}".replace("-SNAPSHOT", "") }}
	configurations {
		all {
			transitive = false
		}
	    provided {
		    dependencies.all { dep ->
	            exclude group: "*", module: "*"
	            //configurations.default.exclude group: dep.group, module: dep.name
	        }
        }
	    compile.extendsFrom provided
	}
}

configure(subprojects.findAll { webProjects.contains(it.name) }) {
    apply plugin: 'war'
    apply plugin: 'eclipse-wtp'
    apply from: '../gradle/version/versioning.gradle'
    webAppDirName = 'src/main/webapp'
    dependencies {
        providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
        providedCompile 'jstl:jstl:1.2'
	    //compile(project(":applechip-core"))
	    		provided("org.springframework.security:spring-security-core:$springframeworksecurityVersion")
		provided("org.springframework.data:spring-data-commons:${springframeworkdataVersion}")
		provided("org.springframework:spring-orm:$springframeworkVersion")
		provided("org.springframework:spring-tx:$springframeworkVersion")
		provided("org.springframework:spring-jdbc:$springframeworkVersion")
		provided("org.springframework:spring-context-support:$springframeworkVersion")
		provided("org.springframework:spring-context:$springframeworkVersion")
		provided("org.hibernate:hibernate-entitymanager:$hibernateVersion")
		provided("org.hibernate:hibernate-core:$hibernateVersion")
		provided("net.sf.ehcache:ehcache:2.8.3")
		provided("org.springframework:spring-webmvc:$springframeworkVersion")
		provided("org.springframework:spring-web:$springframeworkVersion")
		provided("org.springframework:spring-beans:$springframeworkVersion")
		provided("org.springframework:spring-core:$springframeworkVersion")
		provided("org.springframework:spring-aop:$springframeworkVersion")
		provided("aopalliance:aopalliance:1.0")
		provided jdbcDrivers
		provided("edu.uci.ics:crawler4j:3.5")
	    provided("com.fasterxml.jackson.core:jackson-databind:2.4.1")
	    provided("com.fasterxml.jackson.core:jackson-annotations:2.4.1")
	    provided("com.mysema.querydsl:querydsl-jpa:3.4.0")
	    provided("org.eclipse.persistence:javax.persistence:2.1.0")
    }
    eclipse {
        wtp {
            facet {
                facet name: 'jst.web', version: '3.0'
                facet name: 'jst.java', version: '1.7'
                facet name: 'wst.jsdt.web', version: '1.0'
            }
        }
    }
    clean {
        delete project.file('/src/main/webapp/WEB-INF/classes'), project.file('/src/main/webapp/WEB-INF/lib')
    }
    war {
    	dependsOn createBuildInfoFile
    	from(buildDir) {
    		include 'build-info.properties'
    		into('WEB-INF/classes')
    	}
    }
}
/*
task wrapper(type: Wrapper) {
    gradleVersion = '1.8'
}
*/

configure(rootProject) {
	tasks.withType(JavaCompile){
		def warnLogFile = file("$buildDir/${name}Warnings.log")
		logging.addStandardErrorListener(new StandardOutputListener(){ void onOutput(CharSequence output){ warnLogFile << output }})
	}
}

configure(subprojects) { project ->
    apply plugin: 'java'
    apply plugin: 'eclipse'
	dependencies {
		provided("org.projectlombok:lombok:1.14.4")
		provided("commons-configuration:commons-configuration:1.10")
		provided("commons-lang:commons-lang:2.6")
		provided("commons-io:commons-io:2.4")
		provided("commons-collections:commons-collections:3.2.1")
		provided("commons-dbcp:commons-dbcp:1.4")
		provided("commons-codec:commons-codec:1.9")
		provided("commons-pool:commons-pool:1.6")
	    provided("org.slf4j:slf4j-api:${slf4jVersion}")
	    provided("org.slf4j:jcl-over-slf4j:${slf4jVersion}")
	    provided("org.slf4j:log4j-over-slf4j:${slf4jVersion}")
	    provided("org.slf4j:jul-to-slf4j:${slf4jVersion}")
	    provided("ch.qos.logback:logback-core:1.1.2")
	    provided("ch.qos.logback:logback-classic:1.1.2")
		testCompile("org.springframework:spring-test:${springframeworkVersion}")
		testCompile("junit:junit:4.11")
		testCompile("org.mockito:mockito-all:1.9.5")
	}
	
	processResources {
		filter(org.apache.tools.ant.filters.ReplaceTokens, 
	          tokens: [
	            'environment': System.properties['environment'],
	            'jdbcType': System.properties['jdbcType'],
	            'jdbcUrl': System.properties['jdbcUrl'],
	            'jdbcUsername': System.properties['jdbcUsername'],
	            'jdbcPassword': System.properties['jdbcPassword']
	          ]
	        )
		}
	processTestResources {
		filter(org.apache.tools.ant.filters.ReplaceTokens, 
	          tokens: [
	            'environment': System.properties['environment'],
	            'jdbcType': System.properties['jdbcType'],
	            'jdbcUrl': System.properties['jdbcUrl'],
	            'jdbcUsername': System.properties['jdbcUsername'],
	            'jdbcPassword': System.properties['jdbcPassword']
	          ]
	        )
		}
	eclipse.classpath.file {
	    beforeMerged { classpath -> 
	        classpath.entries.clear()
	    }
	    whenMerged {  cp -> 
	        cp.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder  && it.path.startsWith("src/main/") }*.output = "build/classes/main" 
	        cp.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder  && it.path.startsWith("src/test/") }*.output = "build/classes/test" 
	        cp.entries.removeAll { it.kind == "output" }
	    }
	}
	
	/*
	eclipse.project.file.beforeMerged { project ->
		project.natures.clear()
	}*/


	sourceSets.main.output.resourcesDir = sourceSets.main.output.classesDir
	sourceSets.test.output.resourcesDir = sourceSets.test.output.classesDir
}

project(":applechip-core") {
//apply from: 'http://webdav.bywook.com/resource/build.gradle'
//apply from: hibernateJpaSchemaGenerationTask

apply from: '../gradle/version/generateSchemaTask.gradle'
apply from: '../gradle/version/generateQueryDSLTask.gradle'
	dependencies {
		provided("org.springframework.security:spring-security-core:$springframeworksecurityVersion")
		provided("org.springframework.data:spring-data-commons:${springframeworkdataVersion}")
		provided("org.springframework:spring-orm:$springframeworkVersion")
		provided("org.springframework:spring-tx:$springframeworkVersion")
		provided("org.springframework:spring-jdbc:$springframeworkVersion")
		provided("org.springframework:spring-context-support:$springframeworkVersion")
		provided("org.springframework:spring-context:$springframeworkVersion")
		provided("org.hibernate:hibernate-entitymanager:$hibernateVersion")
		provided("org.hibernate:hibernate-core:$hibernateVersion")
		provided("org.hibernate:hibernate-ehcache:$hibernateVersion")
		provided("org.hibernate.common:hibernate-commons-annotations:4.0.5.Final")
		provided("org.jboss.logging:jboss-logging:3.1.4.GA")
		provided("org.jboss:jandex:1.2.1.Final")
		provided("net.sf.ehcache:ehcache:2.8.3")
		provided("org.springframework:spring-webmvc:$springframeworkVersion")
		provided("org.springframework:spring-web:$springframeworkVersion")
		provided("org.springframework:spring-beans:$springframeworkVersion")
		provided("org.springframework:spring-core:$springframeworkVersion")
		provided("org.springframework:spring-aop:$springframeworkVersion")
		provided("org.springframework:spring-expression:$springframeworkVersion")
		provided("aopalliance:aopalliance:1.0")
		provided jdbcDrivers
		provided("edu.uci.ics:crawler4j:3.5")
	    provided("com.fasterxml.jackson.core:jackson-databind:2.4.1")
	    provided("com.fasterxml.jackson.core:jackson-annotations:2.4.1")
	    provided("com.fasterxml.jackson.core:jackson-core:2.4.1")
	    provided("org.eclipse.persistence:javax.persistence:2.1.0")
	    provided("org.aspectj:aspectjrt:1.8.1")
	    provided("org.aspectj:aspectjweaver:1.8.1")
	    provided 'javax.servlet:javax.servlet-api:3.0.1'
        provided 'jstl:jstl:1.2'
        provided("javax.ws.rs:jsr311-api:1.1.1")
        provided("javax.transaction:javax.transaction-api:1.2")
        provided("org.javassist:javassist:3.18.2-GA")
        provided("dom4j:dom4j:1.6")
            //compile gradleApi()
	    //provided("com.mysema.querydsl:querydsl-core:3.4.2")
	    //provided("com.mysema.querydsl:querydsl-apt:3.4.2")
	    //provided("com.mysema.querydsl:querydsl-jpa:3.4.2")
	}
	
	compileJava {
	    dependsOn generateQueryDSL
	    source generateQueryDSL.destinationDir
	}
	
	compileGeneratedJava {
	    dependsOn generateQueryDSL
	    options.warnings = false
	    classpath += sourceSets.main.runtimeClasspath
	}
	clean {
	    delete sourceSets.generated.java.srcDirs
	}
jar.dependsOn << generateSchemaTask
	/*
apply plugin: 'applechip-plugin'
jar.dependsOn << hibernateTask
applechipSetting {
jdbcType = "${jdbcType}".toString()
jdbcUrl = "${jdbcUrl}".toString()
jdbcUsername = "${jdbcUsername}".toString()
jdbcPassword = System.properties['jdbcPassword']
}
*/
}

project(":applechip-plugin") {
	apply from: "$project.rootProject.projectDir/gradle/version/uploadArchives.gradle"
	dependencies {
	    compile gradleApi()
	    compile("org.hibernate:hibernate-core:$hibernateVersion")
	}
	
/*
sourceSets.main.resources.srcDirs += "src/main/java"
sourceSets {
main {
compileClasspath += configurations.provided
runtimeClasspath += configurations.provided
}
test {
compileClasspath += configurations.provided
runtimeClasspath += configurations.provided
}
}
*/
}
