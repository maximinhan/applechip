apply plugin: 'maven'
apply plugin: 'pmd'


task release(dependsOn: assemble) << {
	println "We release now"
}
gradle.taskGraph.whenReady {
	taskGraph ->
		if (taskGraph.hasTask(':release')) {
			version = '1.0'
		} else {
			version = '1.0-SNAPSHOT'
		}
}


gradle.taskGraph.beforeTask {
	Task task ->
		println "excuting $task ..."
}

gradle.taskGraph.afterTask {
	Task task, TaskState state ->
		if (state.failure) {
			println "failure"
		} else {
			println "done"
		}
}
archivesBaseName = "applechip"

task configure << {
    def pos = new java.text.FieldPosition(10)
    apply from: 'applechip.gradle', to: pos
    println pos.versionInfo
}

/**
configure (install.repositories.mavenInstaller) {
	pom.project {
		version '1.0-Maven'
		groupId 'applechip'
		artifactId 'applechip'
	}
}
**/
ext {
    javaVersion = '1.7'
    javaEncoding = 'UTF-8'

    springframeworkVersion = '4.0.3.RELEASE'
    springframeworkdataVersion = '1.6.0.RELEASE'
    springframeworksecurityVersion = '3.2.4.RELEASE'
    hibernateVersion = '4.3.5.Final'
    logbackVersion = '1.1.2'
    slf4jVersion = '1.7.7'
    mysqlJdbcDriverVersion = '5.1.16' // 버전??주의!! http://wiki.coupang.net:8090/pages/viewpage.action?pageId=18357672

    webProjects = ['applechip-api', 'applechip-web']
}

List springframeworks = [
        "org.springframework:spring-core:${springframeworkVersion}",
        "org.springframework:spring-context:${springframeworkVersion}",
        "org.springframework:spring-context-support:${springframeworkVersion}",
        "org.springframework:spring-beans:${springframeworkVersion}",
        "org.springframework:spring-webmvc:${springframeworkVersion}",
        "org.springframework:spring-tx:${springframeworkVersion}",
        "org.springframework:spring-orm:${springframeworkVersion}",
        "org.springframework:spring-oxm:${springframeworkVersion}",
        "org.springframework:spring-aop:${springframeworkVersion}",
        "org.springframework:spring-expression:${springframeworkVersion}",
        "org.springframework:spring-test:${springframeworkVersion}"
]

List loggers = [
        "org.slf4j:slf4j-api:${slf4jVersion}",
        "org.slf4j:jcl-over-slf4j:${slf4jVersion}",
        "org.slf4j:log4j-over-slf4j:${slf4jVersion}",
        "org.slf4j:jul-to-slf4j:${slf4jVersion}",
        "ch.qos.logback:logback-core:${logbackVersion}",
        "ch.qos.logback:logback-classic:${logbackVersion}",
        'org.logback-extensions:logback-ext-spring:0.1.1',
        'org.codehaus.groovy:groovy-all:2.1.5' // groovy for logback
]


List jdbcDrivers = [
        "mysql:mysql-connector-java:${mysqlJdbcDriverVersion}"
]

buildDir = 'target'

allprojects{
apply plugin: 'pmd'
	buildscript {
	    repositories {
	        mavenLocal()
	        mavenCentral()
	        //mavenRepo urls: 'http://nexus.bywook.com/nexus/content/groups/public' flatDir name: 'localRepository', dirs: 'lib'
	        //maven {
	        //  url "http://nexus.bywook.com/nexus/content/groups/public"
	        //}
	    }
	}
	repositories {
	    mavenLocal()
	    mavenCentral()
	    maven {
	      url "http://nexus.bywook.com/nexus/content/groups/public"
	    }
	}
	configurations {
		deployerJars
	}
	dependencies {
		deployerJars "org.apache.maven.wagon:wagon-ssh:1.0-beta-2"
	}
	pmd {
		ignoreFailures = true
	}
	tasks.withType(Pmd) {
		reports {
			xml.enabled = false
			html.enabled = true
		}
	}
		/**
	task integrationTest(type: Test) {
		description = 'Run'
		group = 'ver'
		testClassesDir = sourceSets.integrationTest.output.classesDir
		testResultsDir = file("$testResultsDir/integration")
	}
	sourceSets {
		integrationTest {
			java.srcDir file('src/integTest/java')
			resources.srcDir file('src/integTest/resources')
			compileClasspath = sourceSets.main.output + configurations.testRuntime
			runtimeClasspath = out + compileClasspath
		}
		main {
			java {
				srcDir 'src'
			}
		}
		test {
			java {
				srcDir 'test'
			}
		}
	}
**/
}

subprojects {
    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'eclipse-wtp'

    dependencies() {
        compile springframeworks
        compile loggers
        compile jdbcDrivers

        compile group: 'commons-collections', name: 'commons-collections', version: '3.2'
        compile 'jstl:jstl:1.2'

        testCompile group: 'junit', name: 'junit', version: '4.+'
        testCompile 'org.mockito:mockito-all:1.9.5'

    }

    eclipse {
        classpath {
            downloadSources = true
            defaultOutputDir = file("${buildDir}/classes/main")
        }
    }
}


// configure Web Projects
configure(subprojects.findAll { webProjects.contains(it.name) }) {
    apply plugin: 'war'

    webAppDirName = 'src/main/webapp'

    dependencies {
        providedCompile 'javax.servlet:javax.servlet-api:3.0.1'
    }

    eclipse {
        wtp {
            facet {
                facet name: 'jst.web', version: '3.0' // Servlet Spec Version 지??                facet name: 'jst.java', version: '1.7' // Java Version 지?? 1.7 ...
                facet name: 'wst.jsdt.web', version: '1.0'
            }
        }
    }
    // Clean?�에 /src/main/webapp/WEB-INF/classes|lib ??��
    clean {
        delete project.file('/src/main/webapp/WEB-INF/classes'), project.file('/src/main/webapp/WEB-INF/lib')
    }
    
    task createBuildInfoFile << {
    	def buildInfoFile = new File("$buildDir/build-info.properties")
    	Properties properties = new Properties()
    	properties.setProperty('version', project.version.toString())
    	properties.setProperty('timestamp', '111')
    	properties.store(buildInfoFile.newWriter(), null)
    }
    
    war {
    	dependsOn createBuildInfoFile
    	baseName = 'applechip'
    	from(buildDir) {
    		include 'build-info.properties'
    		into('WEB-INF/classes')
    	}
    }

}

uploadArchives { 
    repositories.mavenDeployer {
    /**
        pom.version = '1.0-SNAPSHOT'
        pom.groupId = 'com.applechip'
        addFilter('api') {artifact, file ->
            artifact.name == 'applechip-api'
        }
        addFilter('web') {artifact, file ->
            artifact.name == 'applechip-web'
        }
        **/
        configuration = configurations.deployerJars
        pom.project {
               groupId 'com.companyname'
               artifactId 'mylib'
                packaging 'war'
               version  '1.0.0'
        }
        repository(url: "scp://nexus.bywook.com/content/repositories/releases/") {
            authentication(userName: "me", password: "myPassword")
        }
        /**
        repository(url: "http://nexus.bywook.com/content/repositories/releases/") {
            authentication(userName: "me", password: "myPassword")
        }
        **/
        snapshotRepository(url: "http://nexus.bywook.com/content/repositories/snapshots/") {
            authentication(userName: "me", password: "myPassword")
        }
    }
}
