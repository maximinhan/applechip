final String DEFAULT_PROFILE = 'development'
buildscript {
    repositories {
        maven { url "http://nexus.bywook.com/content/groups/public" }
        mavenCentral()
        jcenter()
        maven { url "http://download.java.net/maven/2" }
        maven { url "http://repo.springsource.org/plugins-release" }
	}
	dependencies {
		classpath("org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8")
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
	}
}

ext {
	linkHomepage = 'http://applechip.bywook.com'
	linkCi = 'https://jenkins.bywook.com'
	linkIssue = 'https://redmine.bywook.com'
	linkScmUrl = 'https://github.com/maximinhan/applechip'
	linkScmConnection = 'scm:git:git://github.com/maximinhan/applechip.git'
	linkScmDevConnection = 'scm:git:ssh://git@github.com:maximinhan/applechip.git'

	moduleProjects  = subprojects.findAll {
		it.name.equals('applechip-core') || it.name.equals('applechip-plugin')
	}
	webProjects  = subprojects.findAll {
		it.name.equals('applechip-api') || it.name.equals('applechip-web')
	}
	appProjects  = subprojects.findAll {
		it.name.equals('applechip-android')
	}
}

gradle.taskGraph.beforeTask {Task task -> println "excuting $task ..."}
gradle.taskGraph.afterTask {Task task, TaskState state -> if (state.failure) { println "Failure" } else { println "Done" }}

configure(rootProject) {
	tasks.withType(JavaCompile){
		def warnLogFile = file("$buildDir/${name}Warnings.log")
		logging.addStandardErrorListener(new StandardOutputListener(){ void onOutput(CharSequence output){ warnLogFile << output }})
	}
	task wrapper(type: Wrapper) {
	  gradleVersion = "2.0"
	}
}

configure(allprojects) { project ->
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
    apply plugin: 'java'
	apply plugin: 'eclipse'
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-eclipse'
	//apply plugin: 'propdeps-maven'
	//apply plugin: 'propdeps-idea'
    //apply plugin: 'idea'
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
    apply from: "${gradleScriptDir}/gradleScript.gradle"
	//Todo: web
	
	//system
	ext.javaVersion = "1.7"
    ext.javaEncoding = "UTF-8"
    
    //sourceCompatibility = 1.8
    //targetCompatibility = 1.8
    [compileJava, compileTestJava]*.options*.encoding = "${javaEncoding}"

	//tasks.eclipse.dependsOn cleanEclipse
	//tasks.build.dependsOn processResources

    //properties
    ext.jdbcDrivers = [ "mysql:mysql-connector-java:5.1.31", "com.microsoft.sqlserver:sqljdbc4:4.0", "com.oracle:ojdbc7:12.1.0.2", "org.hsqldb:hsqldb:2.3.2", "com.h2database:h2:1.4.181" ] 
	ext.jdbcName = String.format("%s_%s", rootProject.name, "${version}".replaceAll("\\.", "_").replaceAll("\\-", "_")).toUpperCase()
	ext.jdbcUrl = String.format("${jdbcUrl}", "${jdbcName}")

	//dependencies
	ext.springframeworkVersion = '4.0.6.RELEASE'
    ext.springframeworkDataVersion = '1.8.0.RELEASE'
    ext.springframeworkSecurityVersion = '3.2.5.RELEASE'
    ext.hibernateVersion = '4.3.5.Final'
    ext.hibernateCommonsVersion = '4.0.5.Final'
    ext.queryDslVersion = '3.4.3'
    
    //dependencies-common
    ext.commonsConfigurationVersion = '1.10'
    ext.commonsLangVersion = '2.6'
    ext.commonsIoVersion = '2.4'
    ext.commonsCollectionsVersion = '3.2.1'
    ext.commonsDbcpVersion = '1.4'
    ext.commonsCodecVersion = '1.9'
    ext.commonsPoolVersion = '1.6'
    ext.commonsDbcpVersion = '1.4'
    ext.commonsNetVersion = '3.3'
    ext.lombokVersion = '1.14.4'
    ext.slf4jVersion = '1.7.7'
    ext.junitVersion = '4.11'
    ext.mockitoVersion = '1.9.5'
    ext.generatedSrcDir = file("${buildDir}/generated")
    ext.mainSrcDir = 'src/main'
    ext.testSrcDir = 'src/test'
    
    //java
    ext.javaxServletApiVersion = '3.1.0'
    ext.javaxServletJstlVersion = '1.2'
    
    //util
    ext.jacksonVersion = '2.4.1'
    ext.geoIpVersion = '0.9.0'
    ext.crawlerVersion = '3.5'
    ext.zipVersion = '1.3.2'
}

configure(webProjects) {
    apply plugin: 'war'
    apply plugin: 'eclipse-wtp'
    apply from: createVersionTextTask
    dependencies {
		provided jdbcDrivers
		compile project(':applechip-core')
    	providedCompile("javax.servlet:javax.servlet-api:${javaxServletApiVersion}")
    	providedCompile("javax.servlet:jstl:${javaxServletJstlVersion}")
	    provided("org.springframework.security:spring-security-core:${springframeworkSecurityVersion}")
		provided("org.springframework.data:spring-data-commons:${springframeworkDataVersion}")
		provided("org.springframework:spring-orm:$springframeworkVersion")
		provided("org.springframework:spring-tx:$springframeworkVersion")
		provided("org.springframework:spring-context-support:$springframeworkVersion")
		provided("org.springframework:spring-context:$springframeworkVersion")
		provided("org.springframework:spring-expression:$springframeworkVersion")
		provided("org.hibernate:hibernate-entitymanager:$hibernateVersion")
		provided("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	    provided("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
	    provided("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
		provided("org.springframework:spring-webmvc:$springframeworkVersion")
		provided("org.springframework:spring-web:$springframeworkVersion")
		provided("org.springframework:spring-beans:$springframeworkVersion")
		provided("org.springframework:spring-core:$springframeworkVersion")
		provided("org.springframework:spring-aop:$springframeworkVersion")
    }
    configurations.all {
	    transitive = false
	}
    war {
    /*
    	manifest = osgiManifest { 
			instruction 'Private-Package', 'com.applechip' 
			instruction 'Bundle-Classpath', 'WEB-INF/classes' 
			instruction 'Import-Package', '''groovy.''' 
			instruction 'Created-By', 'yyy' 
			instruction 'Bundle Description', "${project.description}" 
			vendor = "yyy" 
			symbolicName = "${project.group}" + "-" + "${project.name}" 
			version = strippedVersion() 
			classesDir = new File( "${buildDir}/classes" ) 
			classpath = configurations.runtime 
			instruction 'Web-ContextPath', "${name}"
		}
		*/
    	dependsOn createVersionText
    	from(buildDir) {
    		include 'version.txt'
    		into('WEB-INF/classes')
    	}
    }
}

configure(subprojects) { project ->
    apply from: uploadArchivesTask
	dependencies {
		provided("org.projectlombok:lombok:$lombokVersion")
		provided("commons-configuration:commons-configuration:$commonsConfigurationVersion")
		provided("commons-lang:commons-lang:$commonsLangVersion")
		provided("commons-io:commons-io:$commonsIoVersion")
		provided("commons-collections:commons-collections:$commonsCollectionsVersion")
		provided("commons-codec:commons-codec:$commonsCodecVersion")
		provided("commons-pool:commons-pool:$commonsPoolVersion")
		provided("commons-net:commons-net:$commonsNetVersion")
		provided("commons-dbcp:commons-dbcp:$commonsDbcpVersion")
		provided("net.lingala.zip4j:zip4j:$zipVersion")
		provided("org.slf4j:jcl-over-slf4j:$slf4jVersion")
	    provided("org.slf4j:slf4j-api:$slf4jVersion")
		testCompile("org.springframework:spring-test:$springframeworkVersion")
		testCompile("junit:junit:$junitVersion")
		testCompile("org.mockito:mockito-all:$mockitoVersion")
	}
	
	    
    sourceSets {
		main {
			output.classesDir = output.resourcesDir = "${buildDir}/classes"
			java.srcDirs = [ "${mainSrcDir}/java", generatedSrcDir ]
			//java.srcDir = "${mainSrcDir}/java"
			resources.srcDirs = [ "${mainSrcDir}/resources" ]
			//compileClasspath = file("${buildDir}/classes") runtimeClasspath = output + compileClasspath
		}
		test {
			output.classesDir = output.resourcesDir = "${buildDir}/test-classes"
			java.srcDirs = [ "${testSrcDir}/java" ]
			resources.srcDirs = [ "${testSrcDir}/resources" ]
		}
	}
	
	eclipse {
		classpath {
			downloadSources = true
			defaultOutputDir = file("${buildDir}/classes")
			file {
			    beforeMerged { classpath -> 
			        classpath.entries.clear()
			    }
				whenMerged { classpath ->
					classpath.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("${mainSrcDir}/") }*.output = file("${buildDir}").name + "/classes"
			        classpath.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("${testSrcDir}/") }*.output = file("${buildDir}").name + "/test-classes" 
			        classpath.entries.removeAll { it.kind == "bin" }
				}
			}
		}
	}
	[processResources, processTestResources]*.filter(org.apache.tools.ant.filters.ReplaceTokens,
		tokens: [
			'jdbcType': project.properties['jdbcType'],
			'jdbcUrl': project.properties['jdbcUrl'],
			'jdbcUsername': project.properties['jdbcUsername'],
			'jdbcPassword': project.properties['jdbcPassword']
		]
	)
}

project(":applechip-core") {
	description = "Applechip Core"
	apply from: generateSchemaTask
	apply from: generateQueryDSLTask
	apply from: generateWsdlTask
	apply from: settingPropertiesTask
	dependencies {
		provided jdbcDrivers
		provided("org.springframework:spring-orm:$springframeworkVersion")
		provided("org.springframework:spring-tx:$springframeworkVersion")
		provided("org.springframework:spring-jdbc:$springframeworkVersion")
		provided("org.springframework:spring-context-support:$springframeworkVersion")
		provided("org.springframework:spring-context:$springframeworkVersion")
		provided("org.springframework:spring-webmvc:$springframeworkVersion")
		provided("org.springframework:spring-web:$springframeworkVersion")
		provided("org.springframework:spring-beans:$springframeworkVersion")
		provided("org.springframework:spring-core:$springframeworkVersion")
		provided("org.springframework:spring-aop:$springframeworkVersion")
		provided("org.springframework:spring-expression:$springframeworkVersion")
		provided("org.springframework.data:spring-data-commons:${springframeworkDataVersion}")
		provided("org.springframework.security:spring-security-core:$springframeworkSecurityVersion")
		provided("org.hibernate:hibernate-entitymanager:$hibernateVersion")
		provided("org.hibernate:hibernate-core:$hibernateVersion")
		provided("org.hibernate:hibernate-ehcache:$hibernateVersion")
	    provided("org.hibernate:hibernate-envers:$hibernateVersion")
		provided("org.hibernate.common:hibernate-commons-annotations:$hibernateCommonsVersion")
	    provided("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
	    provided("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
	    provided("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
	    provided("com.maxmind.geoip2:geoip2:${geoIpVersion}")
		provided("edu.uci.ics:crawler4j:${crawlerVersion}")
		
		provided("net.sf.ehcache:ehcache:2.8.3")
		provided("aopalliance:aopalliance:1.0")
    	provided 'javax.servlet:javax.servlet-api:3.1.0'
    	provided 'javax.servlet:jstl:1.2'
        provided("javax.ws.rs:jsr311-api:1.1.1")
        provided("javax.transaction:javax.transaction-api:1.2")
        provided("org.javassist:javassist:3.18.2-GA")
        provided("dom4j:dom4j:1.6")
	    
	}
	compileJava {
	    dependsOn generateQueryDSL
	}
	//tasks.eclipse.dependsOn processResources
	jar {
		dependsOn generateSchema
	}
}


project(":applechip-plugin") {
	description = "Applechip Plugin"
	dependencies {
	    compile gradleApi()
	    compile localGroovy()
	    compile("org.hibernate:hibernate-core:$hibernateVersion")
	}
	configurations.archives.artifacts.clear()
}
