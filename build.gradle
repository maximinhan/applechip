final String DEFAULT_PROFILE = 'development'
buildscript {
    repositories {
        maven { url "http://nexus.bywook.com/content/groups/public" }
        mavenCentral()
        jcenter()
        maven { url "http://download.java.net/maven/2" }
        maven { url "http://repo.springsource.org/plugins-release" }
	}
	dependencies {
		//classpath("org.gradle.api.plugins:gradle-tomcat-plugin:0.9.8")
		classpath("org.springframework.build.gradle:propdeps-plugin:0.0.7")
		classpath("com.sahlbach.gradle:gradle-jetty-eclipse-plugin:1.9.+")
		//classpath("net.sf.proguard:proguard-gradle:4.10")
		//classpath("io.github.divinespear:jpa-schema-gradle-plugin:0.1.10")
	}
}

ext {
	linkHomepage = 'http://applechip.bywook.com'
	linkCi = 'https://jenkins.bywook.com'
	linkIssue = 'https://redmine.bywook.com'
	linkScmUrl = 'https://github.com/maximinhan/applechip'
	linkScmConnection = 'scm:git:git://github.com/maximinhan/applechip.git'
	linkScmDevConnection = 'scm:git:ssh://git@github.com:maximinhan/applechip.git'

	moduleProjects  = subprojects.findAll {
		it.name.equals('applechip-core')
	}
	webProjects  = subprojects.findAll {
		it.name.equals('applechip-api') || it.name.equals('applechip-web')
	}
	appProjects  = subprojects.findAll {
		it.name.equals('applechip-android')
	}
}

gradle.taskGraph.afterTask {Task task, TaskState state -> if (state.failure) { println "excuting $task Failure" } else { println "excuting $task Done" }}

configure(rootProject) {
	task wrapper(type: Wrapper) {
		description = 'Generates gradlew[.bat] scripts'
		gradleVersion = "2.0"
	}
}
/*
ext {
versions = [
modelmapper: '0.6.3',
tomcat: '7.0.50'
    ]
    compile 'org.springframework:spring-core:'+ versions.spring_core, 
		    'org.springframework:spring-context:'+ versions.spring_core,
*/
configure(allprojects) { project ->
	//system
	ext.gradleScriptDir = "${rootProject.projectDir}/gradle"
	ext.javaVersion = "1.7"
    ext.javaEncoding = "UTF-8"
    ext.buildDir = "build"
    ext.generatedSrcDir = file("${buildDir}/generated-sources/java")
    ext.mainSrcDir = 'src/main'
    ext.testSrcDir = 'src/test'
    
    //dependencies-common
    ext.jdbcDrivers = [ "mysql:mysql-connector-java:5.1.31", "com.microsoft.sqlserver:sqljdbc4:4.0", "com.oracle:ojdbc7:12.1.0.2", "org.hsqldb:hsqldb:2.3.2", "com.h2database:h2:1.4.181" ] 
    ext.lombokVersion = '1.14.4'
    ext.commonsConfigurationVersion = '1.10'
    ext.commonsLangVersion = '2.6'
    ext.commonsIoVersion = '2.4'
    ext.commonsCollectionsVersion = '3.2.1'
    ext.commonsDbcpVersion = '1.4'
    ext.commonsCodecVersion = '1.9'
    ext.commonsDbcpVersion = '1.4'
    ext.commonsNetVersion = '3.3'
    ext.commonsHttpVersion = '4.3.5'
    ext.slf4jVersion = '1.7.5'
    ext.logbackVersion = '1.1.2'
   
    //java
    ext.javaxServletApiVersion = '3.1.0'
    ext.javaxServletJstlVersion = '1.2'
    ext.javaxWsVersion = '1.1.1'
    ext.javaxWebsocketVersion = '1.0'
    
	//dependencies
	ext.springBootStarterVersion = '1.1.8.RELEASE'
    ext.hibernateVersion = '4.3.6.Final'
    ext.ehcacheVersion = '2.4.3'
    ext.queryDslVersion = '3.4.3'
   
    //util
    ext.geoIpVersion = '0.9.0'
    ext.crawlerVersion = '3.5'
    ext.zipVersion = '1.3.2'
    ext.romeVersion = '1.5.0'
}

configure(subprojects) { project ->
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
	apply plugin: 'propdeps'
	apply plugin: 'propdeps-eclipse'
	apply plugin: 'propdeps-maven'
	apply plugin: 'propdeps-idea'
    
    apply from: "${gradleScriptDir}/gradleScript.gradle"
    apply from: uploadArchivesTask
    apply from: settingPropertiesTask
    
	dependencies {
		provided("commons-configuration:commons-configuration:$commonsConfigurationVersion")
		provided("commons-lang:commons-lang:$commonsLangVersion")
		provided("commons-io:commons-io:$commonsIoVersion")
		provided("commons-collections:commons-collections:$commonsCollectionsVersion")
		provided("commons-codec:commons-codec:$commonsCodecVersion")
		provided("commons-net:commons-net:$commonsNetVersion")
		provided("commons-dbcp:commons-dbcp:$commonsDbcpVersion")
		provided("net.lingala.zip4j:zip4j:$zipVersion")
		provided("org.slf4j:jcl-over-slf4j:$slf4jVersion")
		provided("org.projectlombok:lombok:$lombokVersion")
		provided("com.rometools:rome-fetcher:$romeVersion")
		testCompile("org.springframework.boot:spring-boot-starter-test:$springBootStarterVersion")
	}
	
	[compileJava, compileTestJava]*.options*.encoding = "${javaEncoding}"
	[configurations.runtime, configurations.default]*.exclude(module: 'commons-logging')
	//[compileJava, compileTestJava]*.options*.debug = true
	//[compileJava, compileTestJava]*.options*.compilerArgs = ["-g"]
	
	tasks.eclipse.dependsOn processResources
	[processResources, processTestResources]*.dependsOn settingProperties
	//sourceCompatibility = 1.8
    //targetCompatibility = 1.8
    sourceSets {
		main {
			output.classesDir = output.resourcesDir = "${buildDir}/classes"
			java.srcDirs = [ generatedSrcDir, "${mainSrcDir}/java", "${mainSrcDir}/webapp" ]
			resources.srcDirs = [ "${mainSrcDir}/resources" ]
		}
		test {
			output.classesDir = output.resourcesDir = "${buildDir}/test-classes"
			java.srcDirs = [ "${testSrcDir}/java" ]
			resources.srcDirs = [ "${testSrcDir}/resources" ]
		}
	}
	eclipse {
/*
		project {
			natures += 'org.springframework.ide.eclipse.core.springnature'
		}
		*/
		classpath {
			downloadSources = true
			defaultOutputDir = file("${buildDir}/classes")
			file {
			    beforeMerged { classpath -> 
			        classpath.entries.clear()
			    }
				whenMerged { classpath ->
					classpath.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("${mainSrcDir}/") }*.output = file("${buildDir}").name + "/classes"
			        classpath.entries.findAll { it instanceof org.gradle.plugins.ide.eclipse.model.SourceFolder && it.path.startsWith("${testSrcDir}/") }*.output = file("${buildDir}").name + "/test-classes" 
			        classpath.entries.removeAll { it.kind == "bin" }
				}
			}
		}
	}
	test { 
		testLogging {
			events 'started', 'passed'
  			showStandardStreams = true
  		}
  	}
}

configure(webProjects) {
    apply plugin: 'war'
    apply plugin: 'eclipse-wtp'
    apply plugin: 'jettyEclipse'
    dependencies {
		provided jdbcDrivers
		provided("javax.servlet:jstl:${javaxServletJstlVersion}")
    	provided("javax.servlet:javax.servlet-api:${javaxServletApiVersion}")
    	provided("javax.websocket:javax.websocket-api:${javaxWebsocketVersion}")
    	
		provided(project(':applechip-core')) { transitive = false }
    	provided("org.springframework.boot:spring-boot-starter-data-jpa:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-redis:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-security:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-web:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-websocket:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-ws:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-social-twitter:$springBootStarterVersion")
		provided("org.springframework.boot:spring-boot-starter-social-facebook:$springBootStarterVersion")
		provided("org.hibernate:hibernate-ehcache:$hibernateVersion") { transitive = false }
		provided("net.sf.ehcache:ehcache-core:$ehcacheVersion") { transitive = false }
	    provided("org.hibernate:hibernate-envers:$hibernateVersion") { transitive = false }
		provided("ch.qos.logback:logback-classic:$logbackVersion")
		provided("com.mysema.querydsl:querydsl-jpa:$queryDslVersion")
		provided("com.maxmind.geoip2:geoip2:${geoIpVersion}")
    }
	war {
    	manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = project.name
		manifest.attributes["Implementation-Version"] = project.version
		from("${gradleScriptDir}") {
			include 'version.txt'
			into "META-INF"
			expand(projectDate: new Date().format("yyyy-MM-dd' 'HH:mm:ss' 'S"), projectVersion: project.version, projectName: project.name, projectBuild: System.env.SOURCE_BUILD_NUMBER)
		}
    }
}

configure(moduleProjects) {
	jar {
		manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
		manifest.attributes["Implementation-Title"] = project.name
		manifest.attributes["Implementation-Version"] = project.version
		from("${gradleScriptDir}") {
			include 'version.txt'
			into "META-INF"
			expand(projectDate: new Date().format("yyyy-MM-dd' 'HH:mm:ss' 'S"), projectVersion: project.version, projectName: project.name, projectBuild: System.env.SOURCE_BUILD_NUMBER)
		}
	duplicatesStrategy = "exclude"
	}
}

project(":applechip-core") {
	description = "Applechip Core"
	apply from: generateSchemaTask
	apply from: generateQueryDSLTask
	dependencies {
		compile jdbcDrivers
		compile("org.springframework.boot:spring-boot-starter-data-jpa:$springBootStarterVersion")
		compile("org.springframework.boot:spring-boot-starter-redis:$springBootStarterVersion")
		compile("org.springframework.boot:spring-boot-starter-security:$springBootStarterVersion")
		compile("org.springframework.boot:spring-boot-starter-web:$springBootStarterVersion")
		compile("org.hibernate:hibernate-ehcache:$hibernateVersion") { transitive = false }
		compile("net.sf.ehcache:ehcache-core:$ehcacheVersion") { transitive = false }
	    compile("org.hibernate:hibernate-envers:$hibernateVersion") { transitive = false }
		compile("edu.uci.ics:crawler4j:${crawlerVersion}") { transitive = false }
		compile("javax.servlet:javax.servlet-api:${javaxServletApiVersion}") { transitive = false }
	    compile("com.mysema.querydsl:querydsl-jpa:$queryDslVersion") //{ transitive = false }
		compile("com.mysema.querydsl:querydsl-apt:$queryDslVersion") //{ transitive = false }
	    compile("com.maxmind.geoip2:geoip2:${geoIpVersion}") //{ transitive = false }
		compile("org.apache.poi:poi-ooxml:3.9") //{ transitive = false }
	}
	compileJava { 
		dependsOn generateQueryDSL
	}
	testClasses {
		dependsOn generateSchema
	}
}

/* module check */
/*
	configurations.all {
	  resolutionStrategy {
	    failOnVersionConflict()
	    forcedModules = ['com.google.guava:guava:11.0.2', 'commons-logging:commons-logging:1.1.1', 'org.slf4j:slf4j-api:1.7.7']
	    force 'asm:asm-all:3.3.1', 'commons-io:commons-io:1.4'
	    cacheDynamicVersionsFor 10, 'minutes'
	    cacheChangingModulesFor 0, 'seconds'
	  }
	}
*/
