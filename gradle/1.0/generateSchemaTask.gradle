buildscript {
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
	dependencies {
		classpath "org.hibernate:hibernate-core:$hibernateVersion"
	}
}
dependencies {
	provided gradleApi()
}

task generateSchema(type: GenerateSchemaTask, group: 'build', description: 'Generates the Schema query types', dependsOn: [processTestResources]){
	//classesDir = configurations.compile + configurations.provided
}

class GenerateSchemaTask extends DefaultTask {
	def classesDir = project.sourceSets.main.output.classesDir
	@TaskAction
	def generateSchemaTask() {
		assert classesDir.isDirectory()
		def urlList = []
		urlList.add(classesDir.toURI().toURL())
		project.configurations.compile.each { File file -> urlList.add(file.toURI().toURL()) }

		URLClassLoader urlClassLoader = new URLClassLoader(urlList as URL[], getClass().getClassLoader())
		def entityList = []
		classesDir.eachFileRecurse { file ->
			//if (file.name.endsWith('.class') && file.name.startsWith('com.applechip.core.entity')) {
			if (file.name.endsWith('.class') && file.parentFile.parentFile.name.equals('entity')) {
				def classPath = file.absolutePath - classesDir.absolutePath
				entityList << classPath[1..-7].replace(System.properties['file.separator'], '.')
			}
		}
		ClassLoader classLoader = Thread.currentThread().getContextClassLoader()
		try {
			Thread.currentThread().setContextClassLoader(urlClassLoader)
			org.hibernate.cfg.Configuration configuration = new org.hibernate.cfg.Configuration()
			entityList.each { clazz ->
				try {
					Class entity = Class.forName(clazz, true, urlClassLoader)
					if(entity.isAnnotationPresent(javax.persistence.Entity.class)) {
						configuration.addAnnotatedClass(entity)
					}
				} catch (Exception e) {
					println e
				}
			}
			def properties = new Properties()
			new File(classesDir, "properties/database.properties").withInputStream { 
				stream -> properties.load(stream) 
			}
			configuration.properties = properties
			configuration.properties['hibernate.connection.username'] = project.properties['dbUsername']
			configuration.properties['hibernate.connection.password'] = project.properties['dbPassword']
			/*
			configuration.properties['hibernate.connection.driver_class'] = project.properties['dbDriverClassName']
			configuration.properties['hibernate.connection.url'] = project.properties['dbUrl']
			configuration.properties['hibernate.dialect'] = project.properties['dbHibernateDialect']
			configuration.properties['hibernate.hbm2ddl.auto'] = project.properties['dbHibernateHbm2ddlAuto']
			*/
			//java.sql.Connection connection = java.sql.DriverManager.getConnection(project.properties['dbUrl'], project.properties['dbUsername'], project.properties['dbPassword'])
			/*
			Class.forName(project.properties['dbDriverClassName'])
			java.sql.Connection connection = java.sql.DriverManager.getConnection(project.properties['dbUrl'], properties)
			org.hibernate.dialect.Dialect dialect = org.hibernate.dialect.Dialect.getDialect(properties)
			org.hibernate.tool.hbm2ddl.DatabaseMetadata databaseMetadata = new org.hibernate.tool.hbm2ddl.DatabaseMetadata(connection, dialect, configuration)
			
			def schemaUpdateScriptList = configuration.generateSchemaUpdateScriptList(dialect, metadata);
			schemaUpdateScriptList.each { schemaUpdateScript -> 
				def formatted = org.hibernate.engine.jdbc.internal.FormatStyle.DDL.getFormatter().format(schemaUpdateScript.getScript())
				formatted += ";"
				println formatted
			}
			*/
			org.hibernate.tool.hbm2ddl.SchemaExport schemaExport = new org.hibernate.tool.hbm2ddl.SchemaExport(configuration)
			schemaExport.delimiter = ';'
		    schemaExport.format = true
		    schemaExport.outputFile = new File(classesDir, "schema.sql").absolutePath
			schemaExport.execute true, true, false, false
		} catch (Exception e) {
			println e.message()
		} finally {
			Thread.currentThread().setContextClassLoader(classLoader)
		}
	}
}