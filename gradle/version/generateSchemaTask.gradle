buildscript {
	repositories {
		maven { url "http://nexus.bywook.com/content/groups/public" }
		mavenCentral()
	}
	dependencies {
		classpath "org.hibernate:hibernate-core:$hibernateVersion"
	}
}
dependencies {
	compile gradleApi()
}

task generateSchemaTask(type: GenerateSchemaTask, dependsOn: [compileJava, processResources])

class GenerateSchemaTask extends DefaultTask {
	def Map<String, String> dialectMap = [
		MYSQL: "org.hibernate.dialect.MySQL5InnoDBDialect",
		ORACLE: "org.hibernate.dialect.Oracle10gDialect",
		HSQL: "org.hibernate.dialect.HSQLDialect",
		H2: "org.hibernate.dialect.H2Dialect"
		//MYSQL5: "org.hibernate.dialect.MySQL5Dialect",
		//MYSQL: "org.hibernate.dialect.MySQLDialect",
	]
	def Map<String, String> driverClassMap = [
		MYSQL: "com.mysql.jdbc.Driver",
		ORACLE: "oracle.jdbc.OracleDriver"
	]
	def classesDir = project.sourceSets.main.output.classesDir
    def jdbcType = System.properties['jdbcType']
    def jdbcUsername = System.properties['jdbcUsername']
    def jdbcPassword = System.properties['jdbcPassword']
    def jdbcUrl = System.properties['jdbcUrl']
    
	@TaskAction
	def performSchemaGeneration() {
		assert classesDir.isDirectory()
		def urlList = []
		urlList.add(classesDir.toURI().toURL())
		project.configurations.compile.each { File file -> urlList.add(file.toURI().toURL()) }

		URLClassLoader urlClassLoader = new URLClassLoader(urlList as URL[], getClass().getClassLoader())
		def entityList = []
		classesDir.eachFileRecurse { file ->
			if (file.name.endsWith('.class') && file.parentFile.name.equals('entity')) {
				def classPath = file.absolutePath - classesDir.absolutePath
				entityList << classPath[1..-7].replace(System.properties['file.separator'], '.')
			}
		}

		ClassLoader classLoader = Thread.currentThread().getContextClassLoader()
		try {
			Thread.currentThread().setContextClassLoader(urlClassLoader)
			org.hibernate.cfg.Configuration configuration = new org.hibernate.cfg.Configuration()
			entityList.each { clazz ->
				try {
					Class entity = Class.forName(clazz, true, urlClassLoader)
					if(possibleJpaEntity.isAnnotationPresent(javax.persistence.Entity.class)) {
						configuration.addAnnotatedClass(entity)
					}
				} catch (Exception e) {
					println e
				}
			}
			configuration.properties['hibernate.dialect'] = dialectMap.get(jdbcType)
			configuration.properties['hibernate.connection.driver_class'] = driverClassMap.get(jdbcType)
			configuration.properties['hibernate.connection.url'] = jdbcUrl
			configuration.properties['hibernate.connection.username'] = jdbcUsername
			configuration.properties['hibernate.connection.password'] = jdbcPassword
			org.hibernate.tool.hbm2ddl.SchemaExport schemaExport = new org.hibernate.tool.hbm2ddl.SchemaExport(configuration)
			schemaExport.delimiter = ';'
			schemaExport.execute false, false, false, true
			schemaExport.execute false, true, false, false
		} finally {
			Thread.currentThread().setContextClassLoader(classLoader)
		}
	}
}
